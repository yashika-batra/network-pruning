{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"provenance":[{"file_id":"1NKoBExcoRHMiPKC2GRh9fRePR0bY1Ndo","timestamp":1713329573737},{"file_id":"1hBj7JFE3RsOh_FQTKPmKKbE2ksNaaUSp","timestamp":1713317822749},{"file_id":"1Biq29BhmywXIzRURFDu-APUwClXE8rmu","timestamp":1712331386356},{"file_id":"1w20Vhx_MxwY8mVmLORuQcAMSpCdIKmGb","timestamp":1662737366034},{"file_id":"1-kM27DCVOvQ0iPbvNqvHyMNpEBkagy9Q","timestamp":1603749902126},{"file_id":"1TVz0yWqJXl98n1Jnrs-IkBe2fnniRg_9","timestamp":1603747597083}],"gpuType":"V100"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"y-eC-sb34T9w"},"source":["## Accelerate Inference: Neural Network Pruning"]},{"cell_type":"code","metadata":{"id":"L47XBZWm4T9x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713393781345,"user_tz":240,"elapsed":5768,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"4ee2f4bb-023a-4448-f269-887026e68b54"},"source":["import os\n","import numpy as np\n","import cv2\n","import matplotlib.pyplot as plt\n","import pickle\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import datasets, layers, models, regularizers\n","from tensorflow.keras.layers import *\n","\n","print(tf.version.VERSION)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["2.15.0\n"]}]},{"cell_type":"code","metadata":{"id":"V1FQTVeAuNiU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713394071223,"user_tz":240,"elapsed":3930,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"7966b110-a4c7-4505-d7d4-2b5c06c39bc4"},"source":["# untar\n","!ls\n","!tar -xvzf dataset.tar.gz\n","# load train\n","train_images = pickle.load(open('train_images.pkl', 'rb'))\n","train_labels = pickle.load(open('train_labels.pkl', 'rb'))\n","# load val\n","val_images = pickle.load(open('val_images.pkl', 'rb'))\n","val_labels = pickle.load(open('val_labels.pkl', 'rb'))"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["dataset.tar.gz\tsample_data\n","train_images.pkl\n","train_labels.pkl\n","val_images.pkl\n","val_labels.pkl\n"]}]},{"cell_type":"code","metadata":{"id":"KE9JuZDG4T94","executionInfo":{"status":"ok","timestamp":1713394073801,"user_tz":240,"elapsed":1058,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}}},"source":["# Define the neural network architecture (don't change this)\n","\n","model = models.Sequential()\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_regularizer=regularizers.l2(1e-5), input_shape=(25,25,3)))\n","model.add(Activation('relu'))\n","model.add(Conv2D(32, (3, 3), kernel_regularizer=regularizers.l2(1e-5)))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_regularizer=regularizers.l2(1e-5)))\n","model.add(Activation('relu'))\n","model.add(Conv2D(64, (3, 3), kernel_regularizer=regularizers.l2(1e-5)))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","model.add(Flatten())\n","model.add(Dense(512))\n","model.add(Activation('relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(5))\n","model.add(Activation('softmax'))"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"JTzcSoYl4T97","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713394073801,"user_tz":240,"elapsed":7,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"aa32551c-1f47-44bd-e5f3-03f771c3483b"},"source":["print(model.summary())"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 25, 25, 32)        896       \n","                                                                 \n"," activation (Activation)     (None, 25, 25, 32)        0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 23, 23, 32)        9248      \n","                                                                 \n"," activation_1 (Activation)   (None, 23, 23, 32)        0         \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 11, 11, 32)        0         \n"," D)                                                              \n","                                                                 \n"," dropout (Dropout)           (None, 11, 11, 32)        0         \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 11, 11, 64)        18496     \n","                                                                 \n"," activation_2 (Activation)   (None, 11, 11, 64)        0         \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 9, 9, 64)          36928     \n","                                                                 \n"," activation_3 (Activation)   (None, 9, 9, 64)          0         \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 4, 4, 64)          0         \n"," g2D)                                                            \n","                                                                 \n"," dropout_1 (Dropout)         (None, 4, 4, 64)          0         \n","                                                                 \n"," flatten (Flatten)           (None, 1024)              0         \n","                                                                 \n"," dense (Dense)               (None, 512)               524800    \n","                                                                 \n"," activation_4 (Activation)   (None, 512)               0         \n","                                                                 \n"," dropout_2 (Dropout)         (None, 512)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 5)                 2565      \n","                                                                 \n"," activation_5 (Activation)   (None, 5)                 0         \n","                                                                 \n","=================================================================\n","Total params: 592933 (2.26 MB)\n","Trainable params: 592933 (2.26 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n","None\n"]}]},{"cell_type":"code","metadata":{"id":"G9Nk_MAPqZPt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713394337248,"user_tz":240,"elapsed":263448,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"3553ee17-f90e-499d-83a6-0276199243c0"},"source":["# you can use the default hyper-parameters for training,\n","# val accuracy ~72% after 50 epochs\n","\n","model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.0001, weight_decay=1e-6),\n","              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n","              metrics=['accuracy'])\n","\n","history = model.fit(train_images, train_labels, batch_size=32, epochs=50,\n","                    validation_data=(val_images, val_labels)) # train for 50 epochs, with batch size 32"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","703/703 [==============================] - 17s 9ms/step - loss: 1.5333 - accuracy: 0.2990 - val_loss: 1.3949 - val_accuracy: 0.4063\n","Epoch 2/50\n","703/703 [==============================] - 4s 6ms/step - loss: 1.3655 - accuracy: 0.4129 - val_loss: 1.2839 - val_accuracy: 0.4550\n","Epoch 3/50\n","703/703 [==============================] - 5s 6ms/step - loss: 1.3053 - accuracy: 0.4501 - val_loss: 1.2252 - val_accuracy: 0.4899\n","Epoch 4/50\n","703/703 [==============================] - 4s 6ms/step - loss: 1.2513 - accuracy: 0.4783 - val_loss: 1.1796 - val_accuracy: 0.5113\n","Epoch 5/50\n","703/703 [==============================] - 4s 6ms/step - loss: 1.2132 - accuracy: 0.4965 - val_loss: 1.2025 - val_accuracy: 0.4962\n","Epoch 6/50\n","703/703 [==============================] - 5s 6ms/step - loss: 1.1739 - accuracy: 0.5207 - val_loss: 1.1201 - val_accuracy: 0.5406\n","Epoch 7/50\n","703/703 [==============================] - 4s 6ms/step - loss: 1.1480 - accuracy: 0.5356 - val_loss: 1.0807 - val_accuracy: 0.5644\n","Epoch 8/50\n","703/703 [==============================] - 4s 6ms/step - loss: 1.1164 - accuracy: 0.5487 - val_loss: 1.0707 - val_accuracy: 0.5628\n","Epoch 9/50\n","703/703 [==============================] - 5s 7ms/step - loss: 1.0911 - accuracy: 0.5632 - val_loss: 1.0760 - val_accuracy: 0.5640\n","Epoch 10/50\n","703/703 [==============================] - 4s 5ms/step - loss: 1.0668 - accuracy: 0.5754 - val_loss: 1.0274 - val_accuracy: 0.5830\n","Epoch 11/50\n","703/703 [==============================] - 4s 6ms/step - loss: 1.0501 - accuracy: 0.5828 - val_loss: 1.0292 - val_accuracy: 0.5810\n","Epoch 12/50\n","703/703 [==============================] - 5s 7ms/step - loss: 1.0284 - accuracy: 0.5910 - val_loss: 1.0120 - val_accuracy: 0.5877\n","Epoch 13/50\n","703/703 [==============================] - 4s 6ms/step - loss: 1.0141 - accuracy: 0.6004 - val_loss: 0.9791 - val_accuracy: 0.6063\n","Epoch 14/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.9995 - accuracy: 0.6038 - val_loss: 0.9554 - val_accuracy: 0.6147\n","Epoch 15/50\n","703/703 [==============================] - 5s 6ms/step - loss: 0.9837 - accuracy: 0.6142 - val_loss: 0.9969 - val_accuracy: 0.5937\n","Epoch 16/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.9714 - accuracy: 0.6202 - val_loss: 0.9572 - val_accuracy: 0.6147\n","Epoch 17/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.9569 - accuracy: 0.6247 - val_loss: 0.9381 - val_accuracy: 0.6210\n","Epoch 18/50\n","703/703 [==============================] - 5s 7ms/step - loss: 0.9417 - accuracy: 0.6314 - val_loss: 0.9266 - val_accuracy: 0.6238\n","Epoch 19/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.9314 - accuracy: 0.6352 - val_loss: 0.8914 - val_accuracy: 0.6420\n","Epoch 20/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.9159 - accuracy: 0.6447 - val_loss: 0.9373 - val_accuracy: 0.6246\n","Epoch 21/50\n","703/703 [==============================] - 5s 6ms/step - loss: 0.9040 - accuracy: 0.6516 - val_loss: 0.8820 - val_accuracy: 0.6483\n","Epoch 22/50\n","703/703 [==============================] - 4s 5ms/step - loss: 0.8900 - accuracy: 0.6562 - val_loss: 0.8937 - val_accuracy: 0.6432\n","Epoch 23/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.8811 - accuracy: 0.6581 - val_loss: 0.8855 - val_accuracy: 0.6424\n","Epoch 24/50\n","703/703 [==============================] - 5s 7ms/step - loss: 0.8716 - accuracy: 0.6636 - val_loss: 0.8663 - val_accuracy: 0.6491\n","Epoch 25/50\n","703/703 [==============================] - 4s 5ms/step - loss: 0.8613 - accuracy: 0.6688 - val_loss: 0.8842 - val_accuracy: 0.6420\n","Epoch 26/50\n","703/703 [==============================] - 5s 7ms/step - loss: 0.8534 - accuracy: 0.6732 - val_loss: 0.8520 - val_accuracy: 0.6578\n","Epoch 27/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.8448 - accuracy: 0.6760 - val_loss: 0.8377 - val_accuracy: 0.6717\n","Epoch 28/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.8277 - accuracy: 0.6820 - val_loss: 0.8636 - val_accuracy: 0.6554\n","Epoch 29/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.8191 - accuracy: 0.6875 - val_loss: 0.8547 - val_accuracy: 0.6562\n","Epoch 30/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.8141 - accuracy: 0.6884 - val_loss: 0.8251 - val_accuracy: 0.6677\n","Epoch 31/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7998 - accuracy: 0.6922 - val_loss: 0.8311 - val_accuracy: 0.6626\n","Epoch 32/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7919 - accuracy: 0.6979 - val_loss: 0.8410 - val_accuracy: 0.6610\n","Epoch 33/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7850 - accuracy: 0.6991 - val_loss: 0.8414 - val_accuracy: 0.6661\n","Epoch 34/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7751 - accuracy: 0.7039 - val_loss: 0.8246 - val_accuracy: 0.6717\n","Epoch 35/50\n","703/703 [==============================] - 5s 7ms/step - loss: 0.7669 - accuracy: 0.7074 - val_loss: 0.8057 - val_accuracy: 0.6713\n","Epoch 36/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7629 - accuracy: 0.7092 - val_loss: 0.8418 - val_accuracy: 0.6630\n","Epoch 37/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7526 - accuracy: 0.7161 - val_loss: 0.8015 - val_accuracy: 0.6820\n","Epoch 38/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7418 - accuracy: 0.7184 - val_loss: 0.7996 - val_accuracy: 0.6808\n","Epoch 39/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7309 - accuracy: 0.7211 - val_loss: 0.8131 - val_accuracy: 0.6780\n","Epoch 40/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7254 - accuracy: 0.7231 - val_loss: 0.7776 - val_accuracy: 0.6887\n","Epoch 41/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.7171 - accuracy: 0.7276 - val_loss: 0.7959 - val_accuracy: 0.6871\n","Epoch 42/50\n","703/703 [==============================] - 5s 7ms/step - loss: 0.7034 - accuracy: 0.7317 - val_loss: 0.7909 - val_accuracy: 0.6848\n","Epoch 43/50\n","703/703 [==============================] - 4s 5ms/step - loss: 0.7023 - accuracy: 0.7332 - val_loss: 0.7829 - val_accuracy: 0.6931\n","Epoch 44/50\n","703/703 [==============================] - 5s 6ms/step - loss: 0.6947 - accuracy: 0.7377 - val_loss: 0.7769 - val_accuracy: 0.6927\n","Epoch 45/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.6896 - accuracy: 0.7385 - val_loss: 0.7987 - val_accuracy: 0.6863\n","Epoch 46/50\n","703/703 [==============================] - 4s 5ms/step - loss: 0.6745 - accuracy: 0.7429 - val_loss: 0.7796 - val_accuracy: 0.6954\n","Epoch 47/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.6715 - accuracy: 0.7445 - val_loss: 0.7724 - val_accuracy: 0.6978\n","Epoch 48/50\n","703/703 [==============================] - 4s 5ms/step - loss: 0.6612 - accuracy: 0.7523 - val_loss: 0.7545 - val_accuracy: 0.7026\n","Epoch 49/50\n","703/703 [==============================] - 4s 6ms/step - loss: 0.6530 - accuracy: 0.7546 - val_loss: 0.7665 - val_accuracy: 0.6939\n","Epoch 50/50\n","703/703 [==============================] - 5s 7ms/step - loss: 0.6420 - accuracy: 0.7584 - val_loss: 0.7836 - val_accuracy: 0.6883\n"]}]},{"cell_type":"code","metadata":{"id":"vOhpP7M24T9_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713394337575,"user_tz":240,"elapsed":333,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"9641e5d9-7b85-402f-b8fd-7a9c2f6135a4"},"source":["original_weights = model.get_weights()\n","results = model.evaluate(val_images, val_labels, batch_size=128)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["20/20 [==============================] - 0s 8ms/step - loss: 0.7836 - accuracy: 0.6883\n"]}]},{"cell_type":"code","metadata":{"id":"vjw94aij4T-C","executionInfo":{"status":"ok","timestamp":1713394337575,"user_tz":240,"elapsed":5,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}}},"source":["class Pruner:\n","  def __init__(self, model):\n","    self.model = model\n","    weights = model.get_weights()\n","    self.kernels = [weights[0], weights[2], weights[4], weights[6]]\n","\n","\n","  def prune(self, prune_rate):\n","    # for each layer, prune everything below a certain threshold\n","    conv_masks = []\n","    norms = []\n","    for i in range(len(self.kernels)):\n","      weights = self.kernels[i]\n","      norms.append([])\n","      # flatten kernel, get number of filters\n","      num_filters, num_channels, dim_a, dim_b = np.shape(weights)\n","      filters = tf.cast(tf.reshape(weights, [num_filters, num_channels * dim_a * dim_b]), dtype=tf.float32)\n","      curr_mask = []\n","      for i in range(filters.numpy().shape[0]):\n","        # get threshold\n","        threshold = np.percentile(tf.math.abs(filters[i]), prune_rate)\n","        # create a mask for this filter\n","        greater_weights = tf.cast(tf.math.greater(tf.math.abs(weights[i]), threshold), dtype=tf.float32)\n","        curr_mask.append(greater_weights)\n","      # stack masks for the layer, add to conv_masks\n","      curr_mask = np.array(curr_mask)\n","      conv_masks.append(curr_mask)\n","\n","    all_weights = model.get_weights()\n","    all_masks = [np.ones(x.shape) for x in all_weights]\n","    all_masks[0] = conv_masks[0]\n","    all_masks[2] = conv_masks[1]\n","    all_masks[4] = conv_masks[2]\n","    all_masks[6] = conv_masks[3]\n","    new_weights = [tf.math.multiply(all_masks[i], all_weights[i]) for i in range(len(all_masks))]\n","\n","    self.weights = new_weights\n","    self.masks = all_masks\n","\n","    print([x.shape for x in self.weights])\n","    print([x.shape for x in self.masks])\n","\n","    # get sparsity\n","    # for each layer\n","    self.total_parameters = 0\n","    num_one_weights = 0\n","    for mask in self.masks:\n","      num_one_weights += np.sum(mask)\n","      self.total_parameters += np.prod(np.array(mask.shape))\n","    self.num_zero_weights = self.total_parameters - num_one_weights\n","\n","\n","  def fine_tune(self):\n","    \"\"\"\n","    training loop adapted from keras documentation:\n","    https://www.tensorflow.org/guide/keras/writing_a_training_loop_from_scratch\n","    \"\"\"\n","\n","    # Instantiate an optimizer.\n","    optimizer = keras.optimizers.Adam(learning_rate=1e-6, weight_decay=1e-8)\n","    # Instantiate a loss function.\n","    loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False)\n","\n","    # Prepare the training dataset.\n","    batch_size = 32\n","    train_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels))\n","    train_dataset = train_dataset.shuffle(buffer_size=1024).batch(batch_size)\n","\n","    # Prepare the validation dataset.\n","    val_dataset = tf.data.Dataset.from_tensor_slices((val_images, val_labels))\n","    val_dataset = val_dataset.batch(batch_size)\n","\n","    # Prepare the metrics.\n","    train_acc_metric = keras.metrics.SparseCategoricalAccuracy()\n","    val_acc_metric = keras.metrics.SparseCategoricalAccuracy()\n","\n","    epochs = 20\n","    for epoch in range(epochs):\n","      # Iterate over the batches of the dataset.\n","      for step, (x_batch_train, y_batch_train) in enumerate(train_dataset):\n","        # Open a GradientTape to record the operations run\n","        # during the forward pass, which enables auto-differentiation.\n","        with tf.GradientTape() as tape:\n","            # Run the forward pass of the layer. The operations that the layer applies\n","            # to its inputs are going to be recorded on the GradientTape.\n","            logits = self.model(x_batch_train, training=True)  # Logits for this minibatch\n","            # Compute the loss value for this minibatch.\n","            loss_value = loss_fn(y_batch_train, logits)\n","\n","        # Use the gradient tape to automatically retrieve\n","        # the gradients of the trainable variables with respect to the loss.\n","        grads = tape.gradient(loss_value, self.model.trainable_weights)\n","\n","        # Run one step of gradient descent by updating\n","        # the value of the variables to minimize the loss.\n","        optimizer.apply_gradients(zip(grads, self.model.trainable_weights))\n","\n","\n","      # add masks to the trainable_weights\n","      pre_masked_weights = self.model.get_weights()\n","      masked_weights = []\n","      for i in range(len(pre_masked_weights)):\n","        weight = pre_masked_weights[i]\n","        mask = self.masks[i]\n","        masked_weights.append(tf.math.multiply(weight, mask))\n","\n","      self.weights = masked_weights\n","      self.model.set_weights(self.weights)\n","\n","      # Run a validation loop at the end of each epoch.\n","      for x_batch_val, y_batch_val in val_dataset:\n","          val_logits = model(x_batch_val, training=False)\n","          # Update val metrics\n","          val_acc_metric.update_state(y_batch_val, val_logits)\n","      val_acc = val_acc_metric.result()\n","      val_acc_metric.reset_states()\n","      print(\"Epoch %d\" % (epoch,), \"Validation acc: %.4f\" % (float(val_acc),))\n","\n","\n","    # count number of zero weights for each layer at the end of all training\n","    num_zero_weights = 0\n","    for weights in self.weights:\n","      zero_weights = tf.cast(tf.math.equal(weights, 0.0), dtype=tf.float32)\n","      num_zero_weights += np.sum(zero_weights.numpy())\n","    self.num_zero_weights = num_zero_weights\n","    print(\"sparsity:\", self.num_zero_weights/self.total_parameters)\n"],"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def test_pruning(prune_rate):\n","  # reset the model weights to the original values\n","  model.set_weights(original_weights)\n","\n","  # create the pruner, prune, set weights\n","  pruner = Pruner(model)\n","  pruner.prune(prune_rate)\n","  model.set_weights(pruner.weights)\n","  # pruner.fine_tune()\n","  # model.set_weights(pruner.weights)\n","\n","  # evaluate final model and get the accuracy\n","  results = model.evaluate(val_images, val_labels, batch_size=128)\n","  accuracy = results[1]\n","\n","  # get the pruning score\n","  print(\"sparsity\", pruner.num_zero_weights / pruner.total_parameters)\n","  if accuracy > 0.6 and prune_rate > 0:\n","    return (accuracy + pruner.num_zero_weights / pruner.total_parameters) / 2, pruner.weights\n","  else:\n","    return 0, pruner.weights\n"],"metadata":{"id":"eZWl3hIh66Ce","executionInfo":{"status":"ok","timestamp":1713394337575,"user_tz":240,"elapsed":4,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["new_finetune_tests = [10]\n","for rate in new_finetune_tests:\n","  score_metric, finetune_weights = test_pruning(rate)\n","  model.set_weights(finetune_weights)\n","  print(\"\\n---post fine-tuning---\\n\")\n","  print(\"best score:\", score_metric, \"\\nbest prune rate:\", rate)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EqEX8MB_rATn","executionInfo":{"status":"ok","timestamp":1713394337858,"user_tz":240,"elapsed":287,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"83af1eee-155e-4216-eca4-4473c9a74b7c"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[TensorShape([3, 3, 3, 32]), TensorShape([32]), TensorShape([3, 3, 32, 32]), TensorShape([32]), TensorShape([3, 3, 32, 64]), TensorShape([64]), TensorShape([3, 3, 64, 64]), TensorShape([64]), TensorShape([1024, 512]), TensorShape([512]), TensorShape([512, 5]), TensorShape([5])]\n","[(3, 3, 3, 32), (32,), (3, 3, 32, 32), (32,), (3, 3, 32, 64), (64,), (3, 3, 64, 64), (64,), (1024, 512), (512,), (512, 5), (5,)]\n","20/20 [==============================] - 0s 3ms/step - loss: 0.7967 - accuracy: 0.6891\n","sparsity 0.01103497359735417\n","\n","---post fine-tuning---\n","\n","best score: 0.35007194088688814 \n","best prune rate: 10\n"]}]},{"cell_type":"code","metadata":{"id":"wMSKQW4k4T-G","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713394337858,"user_tz":240,"elapsed":7,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"f0333f37-9540-413f-f96f-2363f1e41eba"},"source":["# you need to save the model's weights, naming it 'my_model_weights.h5'\n","model.save_weights(\"my_model_weights_filmag.h5\")\n","\n","# running this cell will immediately download a file called 'my_model_weights.h5'\n","from google.colab import files\n","files.download(\"my_model_weights_filmag.h5\")"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_6e82e7a4-0a65-47eb-b843-53c22a8bb405\", \"my_model_weights_filmag.h5\", 2407040)"]},"metadata":{}}]},{"cell_type":"code","source":["# pareto frontier plot\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# define data values\n","x = np.array([0.01103497359735417, 0.022059828007548913, 0.033084682417743656, 0.04410447723435869, 0.055129331644553435, 0.06615418605474818, 0.07717398087136321, 0.08819883528155795, 0.0992236896917527]) * 100  # X-axis points\n","y = np.array([0.6966, 0.6919, 0.6895, 0.6764, 0.6527, 0.6265, 0.4218, 0.3327, 0.2855]) * 100\n","plt.xlabel(\"Sparsity (%)\")\n","plt.ylabel(\"Accuracy (%)\")\n","plt.title(\"Filter + Magnitude Pruning: Pareto Frontier: Accuracy vs. Sparsity\")\n","\n","plt.plot(x, y, 'o')  # Plot the chart\n","plt.grid()\n","plt.show()  # display"],"metadata":{"id":"mn28cuhh9dUh","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1713378575692,"user_tz":240,"elapsed":1016,"user":{"displayName":"Yashika Batra","userId":"16386167780868304128"}},"outputId":"016e2ead-34a5-469a-814a-550c8d1a504f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}
